package com.bridge.api.service;

import java.time.LocalDate;
import java.util.Optional;

import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.password.PasswordEncoder;

import com.bridge.api.dto.UserDto;
import com.bridge.api.model.Email;
import com.bridge.api.model.User;
import com.bridge.api.mongo.reposetory.UserRepository;
import com.bridge.api.util.UserToken;

@org.springframework.stereotype.Service
public class ServiceImpl implements Service {

	@Autowired
	private UserRepository userRepository;
	
	
	@Autowired
	private ModelMapper mapper;
	
	
	
	@Autowired
	MailService mailService;
	
	
	@Autowired
	PasswordEncoder passwordEncoder;

	@Autowired
	UserToken userToken;
	
	@Override
	public void saveService(UserDto userDto) {

		Email email = new Email();
		User user = mapper.map(userDto, User.class);
		user.setCurrentDate(LocalDate.now());
		user.setPassWord(passwordEncoder.encode(user.getPassWord()));
		User getuser = userRepository.save(user);
		
		String idToken = userToken.generateToken(getuser.getUserId());
		System.out.println(idToken);
		
		
		email.setFrom("bohari2@gmail.com");
		email.setTo(userDto.getEmail());
		email.setSubject("Email Verification ");
		try {
			mailService.send(email, idToken);
		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	@Override
	public void setVerify(String id) {
		String tokenId = userToken.tokenVerify(id);
		Optional<User> user = userRepository.findById(id);
		User user1 = user.get();
		user1.setVerified(true);
		userRepository.save(user1);
	}

	@Override
	public String loginService(String userName, String passWord) {
		Optional<User> user = userRepository.findByEmail(userName);
		if(passwordEncoder.matches(passWord, user.get().getPassWord()))
			return "LogIn Successfully";
		return "Invalid Credenthial";
	}

}
